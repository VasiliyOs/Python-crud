name: CI/CD Pipeline

on:
  push:
    branches: [ "dev" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: self-hosted
    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: kubsu
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.dev
          tags: ${{ vars.DOCKERHUB_USERNAME }}/test-python-crud:latest
          load: true

      - name: Run tests
        run: |
          docker run --rm --network=host ${{ vars.DOCKERHUB_USERNAME }}/test-python-crud:latest

  push-dev-image:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push dev image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          file: ./Dockerfile.dev
          tags: ${{ vars.DOCKERHUB_USERNAME }}/test-python-crud:latest

  merge-to-master:
    needs: push-dev-image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0  # Важно: получаем полную историю
          token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Merge dev into master
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Добавляем remote для dev ветки
          git remote add dev-origin https://github.com/VasiliyQs/Python-crud.git
          
          # Получаем обе ветки полностью
          git fetch origin --unshallow
          git fetch dev-origin --unshallow
          
          # Пробуем мерж с разрешением несвязанных историй
          git merge --allow-unrelated-histories dev-origin/dev -m "Merge dev into master by GitHub Actions"
          
          # Пушим изменения
          git push origin master
          
  deploy-prod:
    needs: merge-to-master
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push production image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.prod
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }} 
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            podman login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io
            podman stop python-crud || true
            podman rm python-crud || true
            podman rmi ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest || true
            podman pull ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest
            podman run -d --name python-crud --network host ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest
            echo "Container has been deployed successfully!"
